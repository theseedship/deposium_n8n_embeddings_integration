name: Publish to NPM

on:
  push:
    branches:
      - master
      - main
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version type to publish (patch/minor/major)'
        required: false
        default: 'patch'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Run linter
        run: npm run lint || true

      - name: Build
        run: npm run build

      - name: Verify build output
        run: |
          if [ ! -d "dist" ]; then
            echo "Error: dist directory not found"
            exit 1
          fi
          echo "Build successful, dist directory contents:"
          ls -la dist/

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Build
        run: npm run build

      - name: Configure Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Check if version already bumped
        id: check_version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          # Get version from previous commit (origin/master)
          git fetch origin master
          PREV_VERSION=$(git show origin/master:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf-8')).version")

          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "prev_version=$PREV_VERSION" >> $GITHUB_OUTPUT

          if [[ "$CURRENT_VERSION" != "$PREV_VERSION" ]]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "Version already bumped manually: $PREV_VERSION → $CURRENT_VERSION"
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "Version unchanged, will auto-bump"
          fi

      - name: Determine version bump type (if needed)
        id: version
        if: steps.check_version.outputs.version_changed == 'false'
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION_TYPE="${{ github.event.inputs.version }}"
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION_TYPE="minor"
          else
            # Check commit message for version hints
            COMMIT_MSG=$(git log -1 --pretty=%B)
            if [[ $COMMIT_MSG == *"BREAKING CHANGE"* ]] || [[ $COMMIT_MSG == *"major:"* ]]; then
              VERSION_TYPE="major"
            elif [[ $COMMIT_MSG == *"feat:"* ]] || [[ $COMMIT_MSG == *"feature:"* ]]; then
              VERSION_TYPE="minor"
            else
              VERSION_TYPE="patch"
            fi
          fi
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT

      - name: Auto-bump version (if not already bumped)
        id: bump
        if: steps.check_version.outputs.version_changed == 'false'
        run: |
          npm version ${{ steps.version.outputs.version_type }} --no-git-tag-version
          VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Log manual version
        if: steps.check_version.outputs.version_changed == 'true'
        run: |
          echo "✅ Using manually set version: ${{ steps.check_version.outputs.current_version }}"
          echo "Skipping auto-bump - package.json already updated"

      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Skip git tag creation - version is managed locally
      # The npm publish already happened successfully

      # GitHub release creation removed - manage releases manually
      # Package is successfully published to NPM at this point